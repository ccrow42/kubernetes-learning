# Run the pure swagger interface

sudo docker run -it --rm -p 80:5000 sile16/pureswagger
# What just happened?

#----------

# Take a look at a simple dockerfile
cd ~
git clone https://github.com/fauria/docker-vsftpd
# The above command should clone the repo in to the home directory

cd docker-vsftpd

#review the Dockerfile, take note that it references an entry point

# this command will build an image to store locally. It simply walks through the steps of a docker compose file. Try adding a ping test to the dockerfile
sudo docker build -t <YourUserName>/vsftp:latest .

# log in to docker hub
sudo docker login --username=ccrow42

sudo docker images

# Run your container:
sudo docker run -d -p 21:21 vsftp:latest

# Create a new repository on hub.docker.com

# Now lets push the container to your new repository (The . is not a typo below!)
sudo docker build -t ccrow42/vsftp:latest .

# You can add another tag to the same image at any time!
# If we add the tag after the fact, you will need to specify the Image ID (find with sudo docker images)
sudo docker tag <Image_ID> ccrow42/vsftp:1.1

sudo docker push ccrow42/vsftp:latest

# You now have an image! You can use your new repository!
# Tags are how we reference images and are VERY important. A tag also specifies the repository and version!

# And a more complete example of running a container:
docker run -d -v /mnt/vsftp:/home/vsftpd \
-p 20:20 -p 21:21 -p 21100-21110:21100-21110 \
-e FTP_USER=myuser -e FTP_PASS=mypass \
-e PASV_ADDRESS=127.0.0.1 -e PASV_MIN_PORT=21100 -e PASV_MAX_PORT=21110 \
--name vsftpd --restart=always fauria/vsftpd

The above is pulling the image from fauria's docker hub repo, but it is the same thing we just built

# Questions
# Why didn't we just use the fauria vsftpd image to start?
# What does the VOLUME keyword even do if I still need to specify a mount at runtime?

#------------

# Build your first container image and upload it to your hub.docker.com repository
# I would recommend openssh, see my example if you get stuck

# HINT, I used this to start the container: sudo docker run -it --rm -p 8080:22 ccrow42/sshd:latest
# The above will hang the session though, how would you fix that? (HINT, make sure you understand the -it vs -d option)

# How would you add a persistent volume to the above example?
# What did you find when you connected to the container? Explore a little

#------------
#Other useful commands for clean up:
docker ps
docker kill
docker rm
docker rmi

# What did we learn?
# A container is really nothing special, but it contains everything required to run an app (did you notice the base image we pulled?)
# All kubernetes will do is solve some of the pain points we discovered when running containers at scale
# In later lessons, we are going to take the SAME containers we built, and run them on kubernetes!
# Why do I need to know this?
# Pay close attention the -v flag in docker! Image being the storage admin that has to support this? Imagine being the developer asking for storage resources or trying to make the above resilient

#------------
# Bonus points!
# How would you use a different image repository?
# Can you access a shell inside these containers?
